{"version":3,"sources":["images/logo.svg","images/illustration-dashboard.png","components/Attribution.js","components/Social.js","components/EmailForm.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Attribution","className","href","target","rel","Social","EmailForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","email","document","getElementById","warning","test","classList","remove","style","visibility","add","preventDefault","onSubmit","id","type","name","placeholder","aria-label","onChange","React","Component","App","src","logo","alt","illustration","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oD,yMCc5BC,G,YAXK,WAClB,OACE,gCACE,uBAAGC,UAAU,eAAb,gBACe,uBAAGC,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,mBADf,cAEW,uBAAGF,KAAK,gDAAR,kBAFX,QCQSG,G,MAVA,WACb,OACE,6BAASJ,UAAU,UACjB,uBAAGC,KAAK,KAAI,uBAAGD,UAAU,sBAAwB,0BAAMA,UAAU,WAAhB,aACjD,uBAAGC,KAAK,KAAI,uBAAGD,UAAU,mBAAqB,0BAAMA,UAAU,WAAhB,YAC9C,uBAAGC,KAAK,KAAI,uBAAGD,UAAU,qBAAuB,0BAAMA,UAAU,WAAhB,iB,2CCmCvCK,G,kBAxCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMV,OAAOM,U,mCAGxBI,GACX,IAAMG,EAAQC,SAASC,eAAe,SAChCC,EAAUF,SAASC,eAAe,WAC7B,6DAEJE,KAAKJ,EAAMP,QAIhBO,EAAMK,UAAUC,OAAO,SACvBH,EAAQI,MAAMC,WAAa,WAJ3BR,EAAMK,UAAUI,IAAI,SACpBN,EAAQI,MAAMC,WAAa,WAK7BX,EAAMa,mB,+BAIN,OACE,0BAAMzB,UAAU,aAAa0B,SAAUb,KAAKF,cAC1C,2BAAOgB,GAAG,QAAQ3B,UAAU,QAAQ4B,KAAK,OAAOC,KAAK,QACnDC,YAAY,wBAAwBC,aAAW,cAC/CvB,MAAOK,KAAKN,MAAMC,MAAOwB,SAAUnB,KAAKJ,eAC1C,uBAAGkB,GAAG,UAAU3B,UAAU,oBAA1B,wCACA,2BAAOA,UAAU,SAAS4B,KAAK,SAASpB,MAAM,YAAYuB,aAAW,uB,GAnCrDE,IAAMC,Y,wCCoBfC,MAff,WACE,OACE,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,OAAOoC,IAAKC,IAAMC,IAAI,SACrC,gDAAqB,0BAAMtC,UAAU,QAAhB,UACrB,uBAAGA,UAAU,QAAb,8BACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,eAAeoC,IAAKG,IAAcD,IAAI,2BACrD,kBAAC,EAAD,MACA,uBAAGtC,UAAU,aAAb,6CACA,kBAAC,EAAD,QCNcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAASC,eAAe,SD6H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.51c279a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ddf22f0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/illustration-dashboard.92dd5c8f.png\";","import React from 'react';\nimport './Attribution.css';\n\nconst Attribution = () =>  {\n  return (\n    <footer>\n      <p className=\"attribution\">\n        Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\" rel=\"noopener noreferrer\">Frontend Mentor</a>. \n        Coded by <a href=\"https://github.com/cbrands/coming-soon-react\">Charles Brands</a>.\n      </p>\n    </footer>\n  );\n}\n\nexport default Attribution;","import React from 'react';\nimport './Social.css';\n\n\nconst Social = () =>  {\n  return (\n    <section className=\"social\">\n      <a href=\"#\"><i className=\"fab fa-facebook-f\"></i><span className=\"sr-only\">facebook</span></a>\n      <a href=\"#\"><i className=\"fab fa-twitter\"></i><span className=\"sr-only\">twitter</span></a>\n      <a href=\"#\"><i className=\"fab fa-instagram\"></i><span className=\"sr-only\">instagram</span></a>\n    </section>\n  );\n}\n\nexport default Social;","import React from 'react';\nimport './EmailForm.css';\n\nclass EmailForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    const email = document.getElementById('email');\n    const warning = document.getElementById('warning');\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\n    \n    if(!re.test(email.value)){\n      email.classList.add('error');\n      warning.style.visibility = 'visible';\n    } else {\n      email.classList.remove('error');\n      warning.style.visibility = 'hidden';\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"email-form\" onSubmit={this.handleSubmit}>\n        <input id=\"email\" className=\"email\" type=\"text\" name=\"email\" \n          placeholder=\"Your email address...\" aria-label=\"Email input\"\n          value={this.state.value} onChange={this.handleChange}/>\n        <p id=\"warning\" className=\"validation-error\">Please provide a valid email address</p>\n        <input className=\"submit\" type=\"submit\" value=\"Notify me\" aria-label=\"Submit button\"/>\n      </form>\n    );\n  }\n}\n\nexport default EmailForm;\n","import React from 'react';\nimport Attribution from './Attribution';\nimport Social from './Social';\nimport EmailForm from './EmailForm';\nimport './App.css';\nimport logo from '../images/logo.svg';\nimport illustration from '../images/illustration-dashboard.png';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"logo\" src={logo} alt=\"Logo\" />\n      <h1>We are launching <span className=\"bold\">soon!</span></h1>\n      <p className=\"text\">Subscribe and get notified</p>\n      <EmailForm/>\n      <img className=\"illustration\" src={illustration} alt=\"Illustration dashboard\" />\n      <Social/>\n      <p className=\"copyright\">&copy; Copyright Ping. All rights reserved.</p>\n      <Attribution/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}